---
title: Phase 1 Deliverable 
date: 10-13-2024
author: Zachariah Dellimore, Suhas Narayanan, Jeffi Thomas
format:
    html:
        theme: cosmo
        toc: false
        embed-resources: true
---

1. Useful Links
    * [Kaltura Video](https://cdnapisec.kaltura.com/index.php/extwidget/preview/partner_id/1888231/uiconf_id/28242191/entry_id/1_gz2tt2pm/embed/dynamic)
    * [Repository](https://github.com/cmsc-vcu/cmsc508-fa2023-prj-nutritionplan-group27#welcome-to-semecter-project-repository)

## API Definition
Our API has many different methods depending on which topic you are searching for. To access the api the user must first create a new user by going to the /create/user url and put their newly created username and password as argument variables in their api request. Creating a user is the only action a user can do without having a valid username and password in their header variables.

### Arguments
1. 'page': Int argument to get the specified page of data. The page argument has a default value of 1 but if the user wants to go to the second page they would put 2 for the page argument. 
Example: /recipes?page=2

2. 'direction': Int argument to reverse the order of what is returned by the API. Input 1 to reverse the order.
Example: /recipes?direction=1

3. 'username': String only used when creating a new user to set the new user's username

4. 'password': String only used when creating a new user to set the new user's password

### Headers
1. 'username' (required): String of user's account's username
1. 'password' (required): String of user's account's password
1. 'user-id' (optional): Int used on some routes to find a user by their id
1. 'goal-id' (optional): Int used on some routes to find a goal by its id
1. 'recipe-id' (optional): Int used on some routes to find a recipe by its id
1. 'mealplan-id' (optional): Int used on some routes to find a mealplan by its id
1. 'username' (optional): String used on some routes to find similar usernames
1. 'aboutme' (optional): String used on some routes to find similar users with similar aboutmes
1. 'search' (optional): String used on some routes to indicate what to search for
1. 'exclude' (optional): Boolean used on some routes to find all rows that are not similar to the search header
1. 'limit' (optional): Int used on some routes to find numerical values above/below the limit
1. 'greater_than' (optional): Boolean used on some routes to either find the values above/below the limit
1. 'new-username' (optional): String used on the update route to update the current users username
1. 'new-password' (optional): String used on the update route to update the current users password
1. 'new-aboutme' (optional): String used on the update route to update the current users about me
1. 'new-mealplan' (optional): Int used on the update route to update the current users mealplan
1. 'new-goal' (optional): Int used on the update route to update the current users goal
1. 'recipe-name' (required): String used in the /create/recipe route to set the new recipe's name
1. 'recipe-calories' (required): Int used in the /create/recipe route to set the new recipe's calorie count
1. 'recipe-ingredients' (required): String used in the /create/recipe route to set the new recipe's ingredients
1. 'recipe-instructions' (required): String used in the /create/recipe route to set the new recipe's instructions

### Create
To access this functionality you use the /create/ url with either user or recipe appended to it. We only allow people to create users and recipes for simplicity and because it is all a user would ever need to do. 

1. /create/user: Requires the username and password arguments to create a new user and add it to the database.

Example url: /create/user?username=NewUsername&password=NewPassword

1. /create/recipe: This route requires the name, calories, ingredients, and instructions headers. It will return whether it created an error or whether your recipe was created successfully.

    Example header: 
    {
            
            'username': '[Your Username]',

            'password': '[Your Password]',
            
            'recipe-name': '[Recipe Name]',

            'calories': '[Calorie Count]',

            'ingredients': '[Ingredients]',

            'instructions': '[Instructions]'
    }

### Update
1. /update/user: Requires one or more of the following headers: new-username, new-password, new-about-me, new-mealplan, new-goal

    Example header: 
    {
        
        'username': '[Your Username]',

        'password': '[Your Password]',

        ‘new-password’: ‘[New Password]’
    }

### Delete
Currently we only support a user deleting theirself

1. /delete/user: Will delete the users account using the username and password in the header.

### Users
Currently we only support a user updating their own personal user values

1. /users: This route takes in the standard arguments as well as the header ‘user-id’ which is an integer. If user-id is not given then the api returns all users sorted by their ids. If user-id is given it returns the user with that user-id.

1. /users/goals: This route takes in the standard arguments as well as the header ‘goal-id’. If goal-id is not given by the user then it returns all users sorted by their goal-id. If the user does give goal-id it returns all users with that specific goal-id.

1. /users/mealplans: This route takes in the standard arguments as well as the header ‘mealplan-id’ which is an integer. If mealplan-id is not given the api returns all users sorted by their mealplan-id. If the user does give mealplan-id it returns all users with that specific mealplan-id

1. /users/username: This route takes in the standard arguments as well as the header ‘username’ which is a string. If username is not given the api returns all users sorted by their username. If username is given then it returns all users with usernames similar to that string

1. /users/aboutme: This route takes in the standard arguments as well as the header ‘aboutme’ which is a string. If aboutme is not given it returns all users sorted by their about_me. If aboutme is given it returns all users with an about_me similar to the aboutme the user supplied.

### Recipes
1. /recipes: This route takes in the standard arguments as well as the ‘recipe-id’ header which is an integer. If the recipe-id header is not given then the API returns all recipes sorted by their id. If recipe-id is given then it returns the recipe with that id.

1. /recipes/name: This route takes in the standard arguments as well as the headers ‘search’ and ‘exclude’. The API returns the recipes ordered by name.

1. /recipes/calories: This route takes in the standard headers as well as the ‘search’, ‘exclude’, ‘limit’, and ‘greater_than’ headers. The API returns the recipes ordered by calories.

1. /recipe/ingredients: This route takes in the standard arguments as well as the ‘search’ and ‘exclude’ headers. The API returns the recipes ordered by ingredients.

### Mealplans
1. /mealplans: This route takes in the standard arguments as well as the ‘mealplan-id’ header. If the mealplan-id header is not given then the API returns all mealplans sorted by their id. If mealplan-id is given then it returns the mealplan with that id.

1. /mealplans/recipe: This route takes in the standard arguments as well as the ‘mealplan-id’, and 'search' headers. the mealplan-id is required and the API will return with an error if one is not given. The search header is optional and lets you find recipes in the given mealplan. The API returns the found recipes ordered by name.

1. /mealplans/popularity: This route takes in the standard arguments as well as the 'mealplan-id' header. If the mealplan-id is not given it will return the list of most popular mealplans sorted by their popularity which will be included in the return json. If mealplan-id is given it will return the mealplan with that mealplan-id and the number of times it was used.

### Goals
1. /goals: This route takes in the standard arguments as well as the 'goal-id' header. If goal-id is not provided it will return the list of goals sorted by id. If goal-id is provided then it will return the goal with that id.

1. /goals/name: This route takes in the standard arguments as well as the 'search' header. If search is not provided it will return the list of goals sorted by name. If search is provided it will return all goals with similar names to search.

1. /goals/popularity: This route takes in the standard arguments as well as the 'goal-id' header. If the goal-id is not given it will return the list of most popular goals sorted by their number of users which will be included in the return json. If goal-id is given it will return the goal with that goal-id and the number of users using that goal.

## Future Considerations
To access this functionality you use the /delete/user url. Currently we only support a user deleting theirself but if we were given more time we would like to add users being able to delete the recipes they made.

To access this functionality you use the /update/user url. Currently we only support a user updating their own personal user values but if we were given more time we would like to add users being able to edit the recipes they made.