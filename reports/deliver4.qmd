---
title: Phase 1 Deliverable 
date: 10-13-2024
author: Zachariah Dellimore, Suhas Narayanan, Jeffi Thomas
format:
    html:
        theme: cosmo
        toc: false
        embed-resources: true
---

## Project Overview and Key Deliverables
1. Temp
1. Useful Links
    * [Pitch Video](https://cdnapisec.kaltura.com/index.php/extwidget/preview/partner_id/1888231/uiconf_id/28242191/entry_id/1_gz2tt2pm/embed/dynamic)
    * Design Video
    * [Repository](https://github.com/cmsc-vcu/cmsc508-fa2023-prj-nutritionplan-group27#welcome-to-semecter-project-repository)

meal plan, user, recipe, nutritional info, goals

## Problem Description
1. **Problem Domain:** 
1. **Need:**
1. **Context, scope, and perspective:**
1. **User roles and use cases:**
1. **Security and Privacy:**

## Database Design
**Entity-Relationship diagram(ERD):**

    1. High-Level Overview
        ```{dot}
            graph ER {
                layout=neato;
                scale=1.1;
                node [shape=box]; User, MealPlan, Recipe, Goal;
                node [shape=ellipse]; user_id, user_name, user_password, meal_plan_name, recipe_name, recipe_nutrition, goal_name, ingredients, recipe_instructions, goal_description, meal_plan_id, recipe_id, goal_id;

                node [shape=diamond,style=filled,color=lightgrey]; using, has, contains;
                
                User -- using [label="n",len=1.00]
                using -- MealPlan [label="1",len=1.00]
                MealPlan -- contains [label="1",len=1.00]
                contains -- Recipe [label="n",len=1.00]
                User -- has [label="1",len=1.00]
                has -- Goal [label="1",len=1.00]
                
                User -- user_id, user_name, user_password;
                MealPlan -- meal_plan_name, meal_plan_id;
                Recipe -- recipe_name, recipe_nutrition, ingredients, recipe_instructions, recipe_id;
                Goal -- goal_name, goal_description, goal_id;
            }
        ```

    2. Granular
        ```{mermaid}
        erDiagram
            User o{--|| MealPlan : using
                User {
                    PRIMARY_KEY user_id
                    string username
                    string password
                }

                MealPlan {
                    PRIMARY_KEY meal_plan_id
                    string name
                    FOREIGN_KEY recipes
                }
            
            MealPlan ||--o{ Recipe : hosts
                MealPlan{}

                Recipe{
                    PRIMARY_KEY recipe_id
                    string name
                    string nutrition
                    string ingredients
                    string instructions
                }

            User ||--|| Goal : has
                User{}

                Goal{
                    PRIMARY_KEY goal_id
                    string name
                    string description
                }
        ```


**Relational Schemas:**

* User
user_id (Primary Key): Integer or unique identifier – - Domain: Unique integers or GUIDs.

username: String – Domain: Alphanumeric characters, certain symbols. Constraint: Must be unique.

password: String – Domain: Alphanumeric characters, symbols. Constraint: Should adhere to password security standards (length, combination of characters, etc.).

* MealPlan:
meal_plan_id (Primary Key): Integer or unique identifier – Domain: Unique integers or GUIDs.

name: String – Domain: Alphanumeric characters, certain symbols.

recipes (Foreign Key pointing to Recipe): List of integers or unique identifiers – Domain: List of unique integers or GUIDs corresponding to Recipe.

* Recipe:
recipe_id (Primary Key): Integer or unique identifier – Domain: Unique integers or GUIDs.
name: String – Domain: Alphanumeric characters, certain symbols.

nutrition: String – Domain: Text format with nutritional details. Constraint: Could have a standard format or units.

ingredients: String – Domain: List or text format detailing ingredients.

instructions: String – Domain: Step-by-step text format.

* Goal:
goal_id (Primary Key): Integer or unique identifier – Domain: Unique integers or GUIDs.

name: String – Domain: Alphanumeric characters, certain symbols.


**Relationships**

* User - MealPlan: One to Many:

One user can have multiple meal plans but each meal plan is used by only one user. This relationship is represented by the foreign key in the MealPlan table pointing to the User's primary key.

* MealPlan - Recipe: Many to Many:

A meal plan can host multiple recipes and a single recipe can be part of multiple meal plans. To efficiently represent this relationship, an intermediary table (junction table) is often used:

* User - Goal: One to One: 

One user has one goal. This is represented by the foreign key in the Goal table pointing to the User's primary key. (However, if you anticipate a user having multiple goals in the future, this relationship may need to change to one-to-many).


**Constraints:**

* User's username must be unique.
* Passwords in the User table should adhere to certain security constraints like minimum length, and a mix of alphanumeric and special characters.


**Functional Dependencies and Normalization:**


**Specific Queries:**

1. Sort users by name alphabetically

1. List all users that have losing weight as their goal

1. List all recipes that contain egg

1. List all the recipes that are less than 750 calories

1. List all the Meal Plans that do not contain peanut butter

1. Who are the 5 oldest(date signed up) users

1. List the 3 most popular Goal

1. List the 5 most popular Meal Plans

1. List the 5 most popular Meal Plan that users with the losing weight goal use

1. List the 5 most popular recipes

1. List the most popular ingredient in all recipes


**Sample Data:**


## Project Management
11. **Draft Project schedule:**
    ```{mermaid}
    gantt
        title A Gantt Diagram
        dateFormat YYYY-MM-DD
        section Section
            Create Basic Website    :a1, 10-15-2023, 7d
            Create Database    :a2, after a1, 14d
            Collect Data    :a3, after a2, 7d
            Finish Website    :a4, after a3, 21d
            Finishing Touches    :a5, after a4, 11d
    ```

    
12. **Video:**