---
title: Phase 1 Deliverable 
date: 10-13-2024
author: Zachariah Dellimore, Suhas Narayanan, Jeffi Thomas
format:
    html:
        theme: cosmo
        toc: false
        embed-resources: true
---

## Project Overview and Key Deliverables
1. Temp
1. Useful Links
    * [Pitch Video](https://cdnapisec.kaltura.com/index.php/extwidget/preview/partner_id/1888231/uiconf_id/28242191/entry_id/1_gz2tt2pm/embed/dynamic)
    * Design Video
    * [Repository](https://github.com/cmsc-vcu/cmsc508-fa2023-prj-nutritionplan-group27#welcome-to-semecter-project-repository)

meal plan, user, recipe, nutritional info, goals

## Problem Description
1. **Problem Domain:** Health and fitness is becoming more and more mainstream. A major aspect of this is your diet and what you are eating. It just so happens that this is also the hardest part of maintaining your health. There are thousands of websites, programs, and videos online however they are mainly general plans that aren't tailored to individuals. This leads to a lot of people giving up on their diet after a short period of time because of a lack of interest, lack of feasibility, or a lack of results. A proper nutritional plan must be tailored to the individual based on lifestyle, goals, and personal health to prove effective in the long run. 

1. **Need:** This database is needed because of the increased demand for guidance in nutritional planning. The sheer volume of resources all with conflicting information makes it confusing to find a plan that works for you. This nutritional database takes into consideration things like dietary restrictions, allergies, health goals, personal lifestyle, meal preferences, etc all to create a sustainable, effective, and fun nutritional plan.

1. **Context, scope, and perspective:** This database has a wide scope as it can apply to anyone who is interested in a nutritional plan. For example, students, teachers, athletes, patients, trainers, children, etc. 

1. **User roles and use cases:**
    * Individuals seeking dietary plans:
        * Needs: Access to personalized dietary plans, tracking and analysis of food intake, viewing and adding recipes, setting health goals.
        * Usage: Will log in to view or update their profile, input daily food consumption, view recipes, and monitor progress towards their dietary goals.
    * Nutritionists:
        * Needs: Access to client profiles (with permission), ability to customize and assign dietary plans, monitor and provide feedback on client progress, add new dietary plans or modify existing ones.
        * Usage: After accessing a client's profile, they'll review dietary records, adjust meal plans, and provide notes or feedback to the individual
    * Fitness Trainer:
        * Needs: View (with permission) the dietary habits of clients to adjust fitness routines accordingly, and possibly provide input or feedback on the balance between diet and exercise.
        * Usage: After reviewing the dietary intake of a client, they might adjust workout plans to complement the client's nutritional intake.

1. **Security and Privacy:** We need to have concern over user’s personal information like name, email, contact details, and health data (allergies, medical condition, dietary restrictions). We could implement a multi-factor authentication to ensure legitimate user access to the system. We can also Provide a User Awareness & Education overview providing users with information on how their data is used in order to maintain security. 

## Database Design
**Entity-Relationship diagram(ERD):**

    1. High-Level Overview
        ```{dot}
            graph ER {
    layout=neato;
    scale=1.1;
    node [shape=box]; User, MealPlan, Recipe, Goal;
    node [shape=ellipse]; user_id, user_name, user_password, meal_plan_name, recipe_name, recipe_nutrition, goal_name, ingredients, recipe_instructions, goal_description, meal_plan_id, recipe_id, goal_id, user_meal_plan_id, user_goal_id;

    node [shape=diamond,style=filled,color=lightgrey]; using, has, contains;
    
    User -- using [label="n",len=1.5]
    using -- MealPlan [label="1",len=1.5]
    MealPlan -- contains [label="1",len=1.5]
    contains -- Recipe [label="n",len=1.5]
    User -- has [label="1",len=1.5]
    has -- Goal [label="1",len=1.5]
    
    User -- user_id, user_name, user_password, user_meal_plan_id, user_goal_id;
    MealPlan -- meal_plan_name, meal_plan_id;
    Recipe -- recipe_name, recipe_nutrition, ingredients, recipe_instructions, recipe_id;
    Goal -- goal_name, goal_description, goal_id;
    
    user_meal_plan_id [label="meal_plan_id (FK)"];
    user_goal_id [label="goal_id (FK)"];
}

        ```

    2. Granular
        ```{mermaid}
        erDiagram
            User o{--|| MealPlan : using
                User {
                    PRIMARY_KEY user_id
                    string username
                    string password
                    FOREIGN_KEY meal_plan_id
                    FOREIGN_KEY goal_id
                }

                MealPlan {
                    PRIMARY_KEY meal_plan_id
                    string name
                    FOREIGN_KEY recipe_id
                }
            
            MealPlan ||--o{ Recipe : hosts
                MealPlan{}

                Recipe{
                    PRIMARY_KEY recipe_id
                    string name
                    string nutrition
                    string ingredients
                    string instructions
                }

            User ||--|| Goal : has
                User{}

                Goal{
                    PRIMARY_KEY goal_id
                    string name
                    string description
                }
        ```


**Relational Schemas:**

* User
user_id (Primary Key): Integer or unique identifier – - Domain: Unique integers or GUIDs.

username: String – Domain: Alphanumeric characters, certain symbols. Constraint: Must be unique.

password: String – Domain: Alphanumeric characters, symbols. Constraint: Should adhere to password security standards (length, combination of characters, etc.).

* MealPlan:
meal_plan_id (Primary Key): Integer or unique identifier – Domain: Unique integers or GUIDs.

name: String – Domain: Alphanumeric characters, certain symbols.

recipes (Foreign Key pointing to Recipe): List of integers or unique identifiers – Domain: List of unique integers or GUIDs corresponding to Recipe.

* Recipe:
recipe_id (Primary Key): Integer or unique identifier – Domain: Unique integers or GUIDs.
name: String – Domain: Alphanumeric characters, certain symbols.

nutrition: String – Domain: Text format with nutritional details. Constraint: Could have a standard format or units.

ingredients: String – Domain: List or text format detailing ingredients.

instructions: String – Domain: Step-by-step text format.

* Goal:
goal_id (Primary Key): Integer or unique identifier – Domain: Unique integers or GUIDs.

name: String – Domain: Alphanumeric characters, certain symbols.


**Relationships**

* User - MealPlan: One to Many:

One user can have multiple meal plans but each meal plan is used by only one user. This relationship is represented by the foreign key in the MealPlan table pointing to the User's primary key.

* MealPlan - Recipe: Many to Many:

A meal plan can host multiple recipes and a single recipe can be part of multiple meal plans. To efficiently represent this relationship, an intermediary table (junction table) is often used:

* User - Goal: One to One: 

One user has one goal. This is represented by the foreign key in the Goal table pointing to the User's primary key. (However, if you anticipate a user having multiple goals in the future, this relationship may need to change to one-to-many).


**Constraints:**

* User's username must be unique.
* Passwords in the User table should adhere to certain security constraints like minimum length, and a mix of alphanumeric and special characters.


**Functional Dependencies and Normalization:**

* $R_{0}(UserID, UserName, UserPassword, MealPlanID, GoalID)$ with FD(s): $UserID \rightarrow UserName, UserPassword, MealPlanID, GoalID;$
* $R_{1}(MealPlanID, MealPlanName)$ with FD(s): $MealPlanID \rightarrow MealPlanName;$
* $R_{2}(MealPlanID, RecipeId)$ with FD(s): $MealPlanID \rightarrow RecipeId;$
* $R_{3}(RecipeId, RecipeName, Nutrition, Ingredients, Instructions)$ with FD(s): $RecipeID \rightarrow RecipeName, Nutrition, Ingredients, Instructions;$
* $R_{4}(GoalID, Name, Description)$ with FD(s): $GoalID \rightarrow Name, Description;$

Here our functional dependencies show how  UserName, UserPassword, MealPlanID, GoalID can all be determined by UserId; MealPlanName and RecipeId can be determined by MealPlanID; RecipeName, Nutrition, Ingredients, Instructions can be determined by RecipeId; and Description, Name can be determined by GoalId.
To decompose input relation into 3NF:
For each functional dependency of the canonical cover set (merging functional dependencies having the same left-hand attributes) of original relation's functional dependencies, create a relation schema with the attributes in that functional dependency (both sides). Since key {A} is present in at least one of the new 3NF relations, no new relation was created.

**Specific Queries:**

1. Sort users by name alphabetically

    $\theta_{(UserName)} \pi_{(OrderBy: UserName)}$

1. List all users that have losing weight as their goal

1. List all recipes that contain egg

1. List all the recipes that are less than 750 calories

1. List all the Meal Plans that do not contain peanut butter

1. Who are the 5 oldest(date signed up) users

1. List the 3 most popular Goal

1. List the 5 most popular Meal Plans

1. List the 5 most popular Meal Plan that users with the losing weight goal use

1. List the 5 most popular recipes

1. List the most popular ingredient in all recipes

TODO: Change Tables

**Sample Data:**

**User Table**

| UserID | UserName | UserPassword | MealPlanID | GoalID |
|--------|----------|--------------|------------|--------|
| 001    | StarNova | WompWomp205! | 002        | 1      |
| 002    | JohnLeon | ard101       | 001        | 3      |
| 003    | GimmeA   | goodGrade100 | 003        | 2      |


**Meal Plan Table**

| MealPlanID | MealPlanName |
|------------|--------------|
| 001        | ProteinPunch |
| 002        | WeightLoss   |
| 003        | WeightGain   |


**Recipe Junction Table**

| MealPlanID | RecipeId |
|------------|----------|
| 001        | 1        |
| 001        | 2        |
| 003        | 3        |

Recipe Table

| RecipeId | RecipeName | Nutrition |   Ingredients    |    Instructions   |
|----------|------------|-----------|------------------|-------------------|
| 1        | ChicknRice | 500cal    | Chickn,Rice,etc. | Season Chicken... |
| 2        | SteakBowl  | 782cal    | Steak,Rice,etc.  | Season Steak...   |
| 3        | CaesarSalad|  289cal   | Lettuce,Salt,etc.| Wash Lettuce...   |

Goal Table

| GoalID |      Name      | Description                       |
|--------|----------------|-----------------------------------|
| 1      | WeightLoss     | Lose 20lbs in 6 months            |
| 2      | WeightGain     | Gain 20lbs in 6 months            |
| 3      | MaintainWeight | Maintain within 5lbs for 6 months |


## Project Management
11. **Draft Project schedule:**
    ```{mermaid}
    gantt
        title A Gantt Diagram
        dateFormat YYYY-MM-DD
        section Section
            Create Basic Website    :a1, 10-15-2023, 7d
            Create Database    :a2, after a1, 14d
            Collect Data    :a3, after a2, 7d
            Finish Website    :a4, after a3, 21d
            Finishing Touches    :a5, after a4, 11d
    ```

    
12. **Video:**